package AAS3;//Добавьте некоторые улучшения в метод из предыдущего задания. Сделайте так,
// чтобы имя пользователя форматировалось по следующим правилам:
//Самое короткое слово в имени должно быть на первом месте,
// а самое длинное — на последнем, то есть отсортируйте слова в имени по длине.
// Сделайте так, чтобы каждое слово в имени было написано с большой буквы.

import java.util.Scanner;

public class ArrayAndString3 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean isCorrectName = false;
        while (!isCorrectName) {
            //зачем инвертировать false на true?
            //при это идея пишет,что он все еще false
            //что я упустил?
            String name = scanner.nextLine(); //Считывает строку из System.in
            isCorrectName = checkName(name);
            if (!isCorrectName) {
                System.out.println("Введите корректное имя!");
            } else {
                System.out.println(formatName(name));
            }
        }
    }

    private static boolean checkName(String name) {
        //Написать код здесь
        String[] words = name.trim().split(" ");
        //объявили массив и инициализировали его, присвоив ему значения полученные
        //в результате сплита, а именно массив строк.
        return words.length == 3;
        //проверка на 3 слова. левый операнд int значение суммы полученных массивов(-
        //-их общее кол-во)
        //правый int значение нашего предела
        //если левый и правый операнды равны, то можем вернуть true и процесс получит
        //развитие
        //сплит можно считать двумерным массивом?
    }

    private static String formatName(String name) {
        //Написать код здесь
        String[] words = name.trim().split(" ");
        //объявили массив и инициализировали его, присвоив ему значения полученные
        //в результате сплита, а именно массив строк.
        sortByLength(words);
        //отправляем на сортировку
        String result = "";
        //объявили переменную и инициализировали ее,как null?
        for (int i = 0; i < words.length; i++) {
            //Проходим по длине массива, длина массива ограничена кол-ом слов.
            //в нашем случае 3 итерации, начиная с 0 индекса.
            String str = words[i];
            //объявляем переменную и инициализируем отсортированным массивом ФИО
            char firstChar = str.charAt(0);
            //Объявляем переменную и инициализируем ее как первая буква каждого массива
            //т.е. в каждой итерации мы будем брать первый символ из массива
            if (!Character.isUpperCase(firstChar)) {
                //если первый символ незаглавный,то
                result += Character.toUpperCase(firstChar) + str.substring(1) + " ";
                //Используем метод для перевода в верх регистр + складываем(конкатенируем?)
                //с возвращенным значением строки без первого символа + пробел,т.к. массив
                //строк, будет помещен в одну строку и нужен визуальный разделитель?
                //получается после 3его слова будет лишний пробел?
            } else {
                result += str + "";
                //тогда в пустую строку, добавляем текущую строку из массива под
                // номером(порядковым) итерации?
                //не совсем понял поведение "тогда"
            }
        }
        return result;
    }

    private static void sortByLength(String[] words) {
        //Написать код здесь
        // int count = 0;
        for (int i = 0; i < words.length - 1; i++) {
            //не пойму,как расставить каунтеры,что бы видеть номер итеррации
            //тут не понял, зачем -1, тут по идее должен быть булевый тригер:"если что-то поменялось в if, в for J, то продолжаем"
            // а так мы схитрили т.к. знаем, что у нас 3 слова и максимум за 2 прохода,3 элемента встанут в нужный порядок
            for (int j = 0; j < words.length - 1; j++) {
                // тут я понял, зачем -1 т.к. у самого крайнего элемента массива нет соседа.
                if (words[j].length() > words[j + 1].length()) {
                    //если левый операнд больше,чем правый то
                    String tmp = words[j];
                    //сохраняем(объявляем и инициализируем) левый операнд под новой
                    //переменной(буфер)
                    words[j] = words[j + 1];
                    //на его место сохраняем правый операнд
                    words[j + 1] = tmp;
                    //на место правого, сохраняем левый, значение которого находится в
                    // специальной буферной переменной.
                    //помогите разместить каунтеры, что бы видеть конфигурацию слов в каждой итерации и кол-во обменов операнд
                }
            }
        }
    }
}
